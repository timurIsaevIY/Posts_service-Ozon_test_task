package notifications

import (
	"context"
	"sync"

	"Ozon_Post_comment_system/internal/models"
)

type Observers interface {
	Subscribe(ctx context.Context, postID int) (<-chan *models.Comment, error)
	Unsubscribe(postID int, targetChan chan *models.Comment)
	Notify(postID int, comment *models.Comment)
}

type Observer struct {
	mu          sync.RWMutex
	subscribers map[int][]chan *models.Comment // postID -> —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
}

func NewObserver() *Observer {
	return &Observer{
		subscribers: make(map[int][]chan *models.Comment),
	}
}

func (o *Observer) Subscribe(ctx context.Context, postID int) (<-chan *models.Comment, error) {
	commentChan := make(chan *models.Comment, 1) // –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
	o.mu.Lock()
	o.subscribers[postID] = append(o.subscribers[postID], commentChan)
	o.mu.Unlock()

	// üî• –ê–≤—Ç–æ-–æ—Ç–ø–∏—Å–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	go func() {
		<-ctx.Done()
		o.Unsubscribe(postID, commentChan)
	}()

	return commentChan, nil
}

func (o *Observer) Unsubscribe(postID int, targetChan chan *models.Comment) {
	o.mu.Lock()
	defer o.mu.Unlock()

	subs, exists := o.subscribers[postID]
	if !exists {
		return
	}

	// üî• –£–¥–∞–ª—è–µ–º `targetChan` –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
	newSubs := subs[:0] // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
	for _, ch := range subs {
		if ch != targetChan {
			newSubs = append(newSubs, ch) // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
		} else {
			close(ch) // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
		}
	}

	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º `postID`
	if len(newSubs) == 0 {
		delete(o.subscribers, postID)
	} else {
		o.subscribers[postID] = newSubs
	}
}

func (o *Observer) Notify(postID int, comment *models.Comment) {
	o.mu.RLock()
	defer o.mu.RUnlock()

	subs, exists := o.subscribers[postID]
	if !exists {
		return
	}

	for _, ch := range subs {
		select {
		case ch <- comment:
		default:
		}
	}
}
